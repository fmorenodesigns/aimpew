{"version":3,"sources":["Game/components/Logo/index.js","Game/components/GameOptions/index.js","Game/components/Countdown/index.js","Game/components/KeyButton/index.js","Game/components/GameOver/index.js","Game/components/Gun/Cube/index.js","Game/components/Gun/index.js","Game/utils.js","Game/components/PointsBoard/index.js","Game/components/Target/index.js","Game/index.js","Game/hooks.js","index.js"],"names":["Logo","className","colors","aim","pew","id","version","xmlns","height","viewBox","d","stroke","fill","fillRule","DEFAULT_GAME_OPTIONS","onHitSoundEffect","onFireSoundEffect","visualEffects","targetGoal","simultaneousTargetCount","targetInterval","targetSize","targetSizeVariation","GameOptions","gameOptions","setGameOptions","showOptions","updateGameOptionsVisibility","overlay","updateOption","useCallback","optionName","newValue","useEffect","Object","values","filter","val","isNaN","parseInt","length","cur","Option","value","updateValue","optionTag","label","type","helpText","min","max","href","target","rel","undefined","htmlFor","onChange","e","Math","checked","Countdown","startValue","setStarted","useState","count","setCount","timeout","setTimeout","clearTimeout","RestartButton","onClick","GameOptionsButton","description","GameOver","pointsBoard","restartGame","Cube","width","depth","borderColor","boxShadow","style","transformOrigin","backgroundColor","front","back","transform","left","right","top","bottom","Gun","rotation","coiling","hasFlash","main","handle","detail","color","rotateX","vertical","rotateY","horizontal","transition","opacity","prettyPercentage","decimalNumber","decimalPlaces","toFixed","PointsBoard","points","maxPoints","hitAccuracy","firedTimes","targetsHitPct","CounterGroup","helpCount","name","counterClassName","Target","size","onHit","hit","setHit","STARTING_GUN_ROTATION","Game","test","navigator","userAgent","PlayableGame","useMemo","Audio","playableArea","useRef","playableAreaWidth","current","getBoundingClientRect","playableAreaHeight","started","ended","setEnded","targets","setTargets","setPoints","setFiredTimes","setMaxPoints","setCoiling","setRotation","setShowOptions","key","initialValue","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","useLocalStorage","reachedTargetCountLimit","handleMovement","x","clientX","y","clientY","onTargetHit","targetIndex","currentTime","play","index","fireGun","sizeVariation","round","random","removeOneTarget","curIdx","slice","handleKeyPress","document","addEventListener","removeEventListener","ref","onMouseMoveCapture","map","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.19a23233.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Logo({\r\n  className,\r\n  colors = { aim: \"#fcfcfc\", pew: \"#4484f4\" },\r\n}) {\r\n  return (\r\n    <svg\r\n      id=\"svg\"\r\n      version=\"1.1\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      height={67.51592356687898}\r\n      viewBox=\"0, 0, 400,67.51592356687898\"\r\n      className={className}\r\n    >\r\n      <g id=\"svgg\">\r\n        <path\r\n          id=\"path0\"\r\n          d=\"M19.500 1.072 C 19.500 1.998,19.454 2.159,19.167 2.250 C 18.873 2.343,18.833 2.502,18.833 3.595 C 18.833 4.722,18.803 4.833,18.500 4.833 C 18.204 4.833,18.167 4.944,18.167 5.833 C 18.167 6.577,18.107 6.833,17.934 6.833 C 17.608 6.833,17.500 7.210,17.500 8.347 C 17.500 9.079,17.440 9.333,17.268 9.333 C 16.941 9.333,16.833 9.710,16.833 10.847 C 16.833 11.573,16.773 11.833,16.604 11.833 C 16.349 11.833,16.167 12.538,16.167 13.526 C 16.167 13.951,16.080 14.210,15.917 14.273 C 15.734 14.343,15.667 14.630,15.667 15.332 C 15.667 16.154,15.618 16.307,15.333 16.382 C 15.040 16.458,15.000 16.609,15.000 17.632 C 15.000 18.654,14.960 18.805,14.667 18.882 C 14.374 18.958,14.333 19.109,14.333 20.132 C 14.333 21.154,14.293 21.305,14.000 21.382 C 13.716 21.456,13.667 21.609,13.667 22.408 C 13.667 23.117,13.585 23.435,13.333 23.705 C 13.089 23.968,13.000 24.293,13.000 24.930 C 13.000 25.548,12.928 25.825,12.750 25.894 C 12.561 25.966,12.500 26.273,12.500 27.161 C 12.500 28.222,12.468 28.333,12.167 28.333 C 11.863 28.333,11.833 28.444,11.833 29.564 C 11.833 30.654,11.795 30.804,11.500 30.882 C 11.217 30.956,11.167 31.109,11.167 31.901 C 11.167 32.611,11.087 32.913,10.833 33.167 C 10.589 33.411,10.500 33.722,10.500 34.333 C 10.500 34.944,10.411 35.256,10.167 35.500 C 9.912 35.755,9.833 36.056,9.833 36.773 C 9.833 37.468,9.759 37.768,9.548 37.922 C 9.339 38.075,9.245 38.445,9.196 39.315 C 9.147 40.182,9.067 40.500,8.898 40.500 C 8.726 40.500,8.667 40.758,8.667 41.500 C 8.667 42.244,8.607 42.500,8.434 42.500 C 8.108 42.500,8.000 42.876,8.000 44.014 C 8.000 44.889,7.962 45.000,7.667 45.000 C 7.363 45.000,7.333 45.111,7.333 46.250 C 7.333 47.389,7.304 47.500,7.000 47.500 C 6.699 47.500,6.667 47.611,6.667 48.661 C 6.667 49.651,6.618 49.848,6.333 50.000 C 6.064 50.144,6.000 50.349,6.000 51.071 C 6.000 51.711,5.929 51.992,5.750 52.060 C 5.570 52.129,5.500 52.411,5.500 53.064 C 5.500 54.126,5.387 54.500,5.066 54.500 C 4.888 54.500,4.833 54.793,4.833 55.750 C 4.833 56.889,4.804 57.000,4.500 57.000 C 4.202 57.000,4.167 57.111,4.167 58.043 C 4.167 58.906,4.109 59.123,3.833 59.295 C 3.560 59.465,3.500 59.683,3.500 60.501 C 3.500 61.241,3.440 61.500,3.269 61.500 C 2.976 61.500,2.838 62.016,2.836 63.125 C 2.834 63.755,2.769 64.000,2.604 64.000 C 2.342 64.000,2.167 64.710,2.167 65.771 C 2.167 66.308,2.101 66.500,1.917 66.500 C 1.750 66.500,1.667 66.667,1.667 67.000 L 1.667 67.500 12.066 67.500 C 23.756 67.500,22.667 67.639,22.667 66.148 C 22.667 65.568,22.741 65.294,22.917 65.227 C 23.108 65.154,23.167 64.840,23.167 63.899 C 23.167 62.778,23.197 62.667,23.500 62.667 C 23.796 62.667,23.833 62.556,23.833 61.667 C 23.833 60.923,23.893 60.667,24.066 60.667 C 24.391 60.667,24.500 60.291,24.500 59.172 C 24.500 58.346,24.548 58.193,24.833 58.118 C 25.126 58.042,25.167 57.891,25.167 56.868 C 25.167 55.846,25.207 55.695,25.500 55.618 C 25.791 55.542,25.833 55.391,25.833 54.438 C 25.833 53.516,25.885 53.317,26.167 53.167 C 26.436 53.022,26.500 52.818,26.500 52.095 C 26.500 51.455,26.571 51.175,26.750 51.106 C 26.939 51.034,27.000 50.727,27.000 49.839 C 27.000 48.778,27.032 48.667,27.333 48.667 C 27.637 48.667,27.667 48.556,27.667 47.417 C 27.667 46.278,27.696 46.167,28.000 46.167 C 28.298 46.167,28.333 46.056,28.333 45.123 C 28.333 44.261,28.391 44.044,28.667 43.872 C 28.936 43.704,29.000 43.483,29.000 42.725 C 29.000 42.035,29.075 41.732,29.282 41.580 C 29.484 41.433,29.585 41.055,29.635 40.270 C 29.683 39.528,29.775 39.167,29.917 39.167 C 30.190 39.167,30.328 38.630,30.331 37.559 C 30.333 36.953,30.406 36.674,30.583 36.606 C 30.767 36.536,30.833 36.245,30.833 35.505 C 30.833 34.760,30.893 34.500,31.064 34.500 C 31.347 34.500,31.495 33.989,31.498 32.998 C 31.499 32.429,31.581 32.196,31.833 32.039 C 32.109 31.867,32.167 31.650,32.167 30.789 C 32.167 29.927,32.224 29.711,32.500 29.539 C 32.781 29.363,32.833 29.150,32.833 28.185 C 32.833 27.179,32.874 27.028,33.167 26.952 C 33.449 26.878,33.500 26.724,33.500 25.950 C 33.500 25.291,33.570 25.009,33.750 24.940 C 33.939 24.867,34.000 24.560,34.000 23.672 C 34.000 22.611,34.032 22.500,34.333 22.500 C 34.637 22.500,34.667 22.389,34.667 21.250 L 34.667 20.000 43.583 20.000 L 52.500 20.000 52.500 20.672 C 52.500 21.089,52.413 21.377,52.271 21.432 C 52.123 21.488,52.000 21.936,51.926 22.686 C 51.850 23.462,51.731 23.883,51.572 23.944 C 51.395 24.012,51.333 24.352,51.333 25.268 C 51.333 26.389,51.303 26.500,51.000 26.500 C 50.707 26.500,50.667 26.611,50.667 27.417 L 50.667 28.333 43.333 28.333 L 36.000 28.333 36.000 28.981 C 36.000 29.488,35.928 29.647,35.667 29.715 C 35.374 29.792,35.333 29.942,35.333 30.965 C 35.333 31.988,35.293 32.138,35.000 32.215 C 34.706 32.292,34.667 32.442,34.667 33.484 C 34.667 34.406,34.613 34.667,34.425 34.667 C 34.253 34.667,34.151 34.956,34.070 35.664 C 34.008 36.212,33.855 36.747,33.729 36.851 C 33.579 36.975,33.500 37.403,33.500 38.084 C 33.500 38.988,33.455 39.139,33.167 39.215 C 32.874 39.292,32.833 39.442,32.833 40.465 C 32.833 41.488,32.793 41.638,32.500 41.715 C 32.209 41.791,32.167 41.942,32.167 42.900 C 32.167 43.817,32.112 44.031,31.833 44.205 C 31.569 44.370,31.500 44.594,31.500 45.282 C 31.500 45.925,31.427 46.191,31.217 46.308 C 31.009 46.425,30.916 46.756,30.865 47.567 L 30.795 48.667 37.814 48.667 L 44.833 48.667 44.833 49.316 C 44.833 49.738,44.746 49.998,44.583 50.060 C 44.394 50.133,44.333 50.438,44.333 51.309 C 44.333 52.321,44.293 52.472,44.000 52.548 C 43.704 52.626,43.667 52.776,43.667 53.901 C 43.667 55.056,43.637 55.167,43.333 55.167 C 43.041 55.167,43.000 55.278,43.000 56.075 C 43.000 56.752,42.929 57.023,42.720 57.140 C 42.520 57.252,42.419 57.592,42.365 58.337 C 42.313 59.055,42.194 59.473,41.978 59.688 C 41.738 59.929,41.667 60.247,41.667 61.083 C 41.667 61.935,41.613 62.167,41.417 62.167 C 41.220 62.167,41.167 62.398,41.167 63.249 C 41.167 64.150,41.111 64.365,40.833 64.539 C 40.564 64.707,40.500 64.927,40.500 65.687 C 40.500 66.488,40.450 66.641,40.167 66.715 C 39.967 66.767,39.833 66.942,39.833 67.151 L 39.833 67.500 50.333 67.500 L 60.833 67.500 60.833 66.750 C 60.833 66.222,60.932 65.901,61.167 65.667 C 61.426 65.407,61.500 65.111,61.500 64.333 C 61.500 63.593,61.560 63.333,61.731 63.333 C 62.024 63.333,62.162 62.817,62.164 61.708 C 62.166 61.043,62.226 60.833,62.417 60.833 C 62.615 60.833,62.667 60.591,62.667 59.651 C 62.667 58.609,62.706 58.458,63.000 58.382 C 63.286 58.307,63.333 58.154,63.333 57.314 C 63.333 56.587,63.393 56.333,63.566 56.333 C 63.891 56.333,64.000 55.958,64.000 54.839 C 64.000 54.012,64.048 53.860,64.333 53.785 C 64.626 53.709,64.667 53.558,64.667 52.556 C 64.667 51.594,64.719 51.381,65.000 51.205 C 65.264 51.041,65.334 50.814,65.337 50.124 C 65.340 49.514,65.439 49.124,65.667 48.833 C 65.885 48.554,65.994 48.153,65.996 47.620 C 65.999 47.068,66.077 46.793,66.250 46.727 C 66.439 46.654,66.500 46.348,66.500 45.467 C 66.500 44.442,66.540 44.292,66.833 44.215 C 67.129 44.138,67.167 43.988,67.167 42.897 C 67.167 41.778,67.197 41.667,67.500 41.667 C 67.793 41.667,67.833 41.556,67.833 40.750 C 67.833 40.056,67.914 39.753,68.167 39.500 C 68.426 39.241,68.500 38.944,68.500 38.167 C 68.500 37.426,68.560 37.167,68.731 37.167 C 69.024 37.167,69.162 36.650,69.164 35.542 C 69.166 34.876,69.226 34.667,69.417 34.667 C 69.617 34.667,69.667 34.417,69.667 33.417 C 69.667 32.278,69.696 32.167,70.000 32.167 C 70.295 32.167,70.333 32.056,70.333 31.207 C 70.333 30.427,70.396 30.208,70.667 30.039 C 70.943 29.866,71.000 29.650,71.000 28.768 C 71.000 27.846,71.044 27.694,71.333 27.618 C 71.626 27.542,71.667 27.391,71.667 26.368 C 71.667 25.346,71.707 25.195,72.000 25.118 C 72.289 25.043,72.333 24.891,72.333 23.969 C 72.333 23.114,72.398 22.852,72.667 22.622 C 72.916 22.409,73.000 22.130,73.000 21.519 C 73.000 20.947,73.075 20.674,73.250 20.606 C 73.439 20.534,73.500 20.229,73.500 19.358 C 73.500 18.346,73.541 18.195,73.833 18.118 C 74.127 18.042,74.167 17.891,74.167 16.860 C 74.167 15.836,74.208 15.676,74.500 15.583 C 74.783 15.494,74.833 15.331,74.833 14.515 C 74.833 13.763,74.907 13.485,75.167 13.250 C 75.420 13.021,75.500 12.737,75.500 12.066 C 75.500 11.413,75.573 11.142,75.780 11.027 C 75.981 10.914,76.080 10.575,76.133 9.810 C 76.185 9.059,76.298 8.663,76.520 8.452 C 76.764 8.220,76.833 7.914,76.833 7.077 C 76.833 6.231,76.887 6.000,77.083 6.000 C 77.275 6.000,77.333 5.787,77.333 5.083 C 77.333 4.389,77.414 4.086,77.667 3.833 C 77.924 3.576,78.000 3.278,78.000 2.519 C 78.000 1.679,78.048 1.526,78.333 1.452 C 78.598 1.382,78.667 1.224,78.667 0.682 L 78.667 0.000 49.083 0.000 L 19.500 0.000 19.500 1.072 M83.833 1.072 C 83.833 1.998,83.788 2.159,83.500 2.250 C 83.206 2.343,83.167 2.502,83.167 3.595 C 83.167 4.722,83.137 4.833,82.833 4.833 C 82.537 4.833,82.500 4.944,82.500 5.833 C 82.500 6.577,82.440 6.833,82.268 6.833 C 81.941 6.833,81.833 7.210,81.833 8.347 C 81.833 9.079,81.773 9.333,81.601 9.333 C 81.275 9.333,81.167 9.710,81.167 10.847 C 81.167 11.573,81.106 11.833,80.938 11.833 C 80.682 11.833,80.500 12.538,80.500 13.526 C 80.500 13.951,80.413 14.210,80.250 14.273 C 80.068 14.343,80.000 14.630,80.000 15.332 C 80.000 16.154,79.951 16.307,79.667 16.382 C 79.374 16.458,79.333 16.609,79.333 17.632 C 79.333 18.654,79.293 18.805,79.000 18.882 C 78.707 18.958,78.667 19.109,78.667 20.132 C 78.667 21.154,78.626 21.305,78.333 21.382 C 78.050 21.456,78.000 21.609,78.000 22.408 C 78.000 23.117,77.918 23.435,77.667 23.705 C 77.422 23.968,77.333 24.293,77.333 24.930 C 77.333 25.548,77.261 25.825,77.083 25.894 C 76.894 25.966,76.833 26.273,76.833 27.161 C 76.833 28.222,76.802 28.333,76.500 28.333 C 76.197 28.333,76.167 28.444,76.167 29.564 C 76.167 30.654,76.129 30.804,75.833 30.882 C 75.550 30.956,75.500 31.109,75.500 31.901 C 75.500 32.611,75.421 32.913,75.167 33.167 C 74.922 33.411,74.833 33.722,74.833 34.333 C 74.833 34.944,74.744 35.256,74.500 35.500 C 74.247 35.753,74.167 36.056,74.167 36.750 C 74.167 37.444,74.086 37.747,73.833 38.000 C 73.568 38.265,73.500 38.556,73.500 39.417 C 73.500 40.269,73.447 40.500,73.250 40.500 C 73.056 40.500,73.000 40.722,73.000 41.500 C 73.000 42.244,72.940 42.500,72.768 42.500 C 72.441 42.500,72.333 42.876,72.333 44.014 C 72.333 44.889,72.296 45.000,72.000 45.000 C 71.696 45.000,71.667 45.111,71.667 46.250 C 71.667 47.389,71.637 47.500,71.333 47.500 C 71.032 47.500,71.000 47.611,71.000 48.661 C 71.000 49.651,70.951 49.848,70.667 50.000 C 70.397 50.144,70.333 50.349,70.333 51.071 C 70.333 51.680,70.260 51.993,70.101 52.053 C 69.951 52.111,69.828 52.556,69.751 53.321 C 69.667 54.163,69.566 54.500,69.400 54.500 C 69.221 54.500,69.167 54.790,69.167 55.750 C 69.167 56.889,69.137 57.000,68.833 57.000 C 68.536 57.000,68.500 57.111,68.500 58.043 C 68.500 58.906,68.442 59.123,68.167 59.295 C 67.894 59.465,67.833 59.683,67.833 60.501 C 67.833 61.241,67.773 61.500,67.603 61.500 C 67.310 61.500,67.172 62.016,67.169 63.125 C 67.167 63.758,67.103 64.000,66.936 64.000 C 66.643 64.000,66.505 64.516,66.502 65.625 C 66.501 66.291,66.440 66.500,66.250 66.500 C 66.083 66.500,66.000 66.667,66.000 67.000 L 66.000 67.500 76.399 67.500 C 88.090 67.500,87.000 67.639,87.000 66.148 C 87.000 65.568,87.074 65.294,87.250 65.227 C 87.441 65.154,87.500 64.840,87.500 63.899 C 87.500 62.778,87.530 62.667,87.833 62.667 C 88.130 62.667,88.167 62.556,88.167 61.667 C 88.167 60.923,88.226 60.667,88.399 60.667 C 88.724 60.667,88.833 60.291,88.833 59.172 C 88.833 58.346,88.882 58.193,89.167 58.118 C 89.460 58.042,89.500 57.891,89.500 56.868 C 89.500 55.846,89.540 55.695,89.833 55.618 C 90.124 55.542,90.167 55.391,90.167 54.438 C 90.167 53.516,90.219 53.317,90.500 53.167 C 90.770 53.022,90.833 52.818,90.833 52.095 C 90.833 51.455,90.904 51.175,91.083 51.106 C 91.273 51.034,91.333 50.727,91.333 49.839 C 91.333 48.778,91.365 48.667,91.667 48.667 C 91.970 48.667,92.000 48.556,92.000 47.417 C 92.000 46.278,92.030 46.167,92.333 46.167 C 92.630 46.167,92.667 46.056,92.667 45.167 C 92.667 44.389,92.741 44.093,93.000 43.833 C 93.247 43.586,93.333 43.278,93.333 42.643 C 93.333 42.031,93.414 41.728,93.616 41.580 C 93.817 41.433,93.919 41.055,93.969 40.270 C 94.016 39.528,94.108 39.167,94.250 39.167 C 94.523 39.167,94.662 38.630,94.664 37.559 C 94.666 36.953,94.740 36.674,94.917 36.606 C 95.101 36.536,95.167 36.245,95.167 35.505 C 95.167 34.760,95.226 34.500,95.397 34.500 C 95.680 34.500,95.828 33.989,95.831 32.998 C 95.833 32.429,95.914 32.196,96.167 32.039 C 96.442 31.867,96.500 31.650,96.500 30.789 C 96.500 29.927,96.558 29.711,96.833 29.539 C 97.114 29.363,97.167 29.150,97.167 28.185 C 97.167 27.179,97.207 27.028,97.500 26.952 C 97.779 26.879,97.833 26.724,97.833 26.004 C 97.833 25.461,97.926 25.051,98.083 24.893 C 98.254 24.722,98.333 24.302,98.333 23.571 C 98.333 22.611,98.368 22.500,98.667 22.500 C 98.970 22.500,99.000 22.389,99.000 21.250 C 99.000 20.111,99.030 20.000,99.333 20.000 C 99.637 20.000,99.667 19.889,99.667 18.750 C 99.667 17.611,99.696 17.500,100.000 17.500 C 100.294 17.500,100.333 17.389,100.333 16.560 C 100.333 15.869,100.408 15.565,100.616 15.414 C 100.817 15.267,100.919 14.889,100.969 14.103 C 101.016 13.361,101.108 13.000,101.250 13.000 C 101.524 13.000,101.662 12.462,101.664 11.375 C 101.666 10.709,101.726 10.500,101.917 10.500 C 102.115 10.500,102.167 10.261,102.167 9.345 C 102.167 8.336,102.209 8.176,102.500 8.083 C 102.784 7.993,102.833 7.831,102.833 6.989 C 102.833 6.255,102.893 6.000,103.066 6.000 C 103.391 6.000,103.500 5.624,103.500 4.506 C 103.500 3.679,103.548 3.526,103.833 3.452 C 104.129 3.374,104.167 3.224,104.167 2.119 C 104.167 1.216,104.235 0.817,104.417 0.667 C 105.213 0.006,105.129 0.000,94.250 0.000 L 83.833 0.000 83.833 1.072 M109.833 1.075 C 109.833 1.917,109.771 2.185,109.548 2.310 C 109.332 2.431,109.246 2.757,109.196 3.651 C 109.147 4.516,109.067 4.833,108.898 4.833 C 108.729 4.833,108.667 5.079,108.667 5.744 C 108.667 6.484,108.604 6.688,108.333 6.833 C 108.049 6.986,108.000 7.182,108.000 8.173 C 108.000 9.222,107.968 9.333,107.667 9.333 C 107.363 9.333,107.333 9.444,107.333 10.583 C 107.333 11.722,107.304 11.833,107.000 11.833 C 106.699 11.833,106.667 11.944,106.667 12.994 C 106.667 13.984,106.618 14.181,106.333 14.333 C 106.064 14.478,106.000 14.682,106.000 15.405 C 106.000 16.045,105.929 16.325,105.750 16.394 C 105.570 16.463,105.500 16.744,105.500 17.398 C 105.500 18.459,105.387 18.833,105.066 18.833 C 104.888 18.833,104.833 19.126,104.833 20.083 C 104.833 21.222,104.804 21.333,104.500 21.333 C 104.202 21.333,104.167 21.444,104.167 22.377 C 104.167 23.239,104.109 23.456,103.833 23.628 C 103.560 23.799,103.500 24.017,103.500 24.835 C 103.500 25.574,103.440 25.833,103.269 25.833 C 102.976 25.833,102.838 26.350,102.836 27.458 C 102.834 28.091,102.770 28.333,102.603 28.333 C 102.311 28.333,102.172 28.849,102.169 29.941 C 102.167 30.547,102.094 30.826,101.917 30.894 C 101.738 30.962,101.667 31.242,101.667 31.874 C 101.667 32.553,101.589 32.826,101.333 33.045 C 101.069 33.271,101.000 33.536,101.000 34.320 C 101.000 35.164,100.951 35.327,100.667 35.417 C 100.376 35.509,100.333 35.669,100.333 36.667 C 100.333 37.664,100.291 37.824,100.000 37.917 C 99.707 38.010,99.667 38.169,99.667 39.242 C 99.667 40.321,99.628 40.471,99.333 40.548 C 99.054 40.621,99.000 40.776,99.000 41.508 C 99.000 42.115,98.919 42.439,98.733 42.575 C 98.554 42.706,98.437 43.136,98.377 43.885 C 98.314 44.671,98.221 45.000,98.061 45.000 C 97.889 45.000,97.833 45.306,97.833 46.250 C 97.833 47.389,97.804 47.500,97.500 47.500 C 97.201 47.500,97.167 47.611,97.167 48.582 C 97.167 49.483,97.111 49.699,96.833 49.872 C 96.563 50.041,96.500 50.261,96.500 51.040 C 96.500 51.746,96.439 52.000,96.269 52.000 C 95.976 52.000,95.838 52.516,95.836 53.625 C 95.834 54.258,95.770 54.500,95.603 54.500 C 95.310 54.500,95.172 55.016,95.169 56.125 C 95.167 56.791,95.107 57.000,94.917 57.000 C 94.723 57.000,94.667 57.219,94.667 57.974 C 94.667 58.737,94.594 59.014,94.333 59.250 C 94.074 59.485,94.000 59.763,94.000 60.506 C 94.000 61.321,93.951 61.474,93.667 61.548 C 93.374 61.625,93.333 61.776,93.333 62.798 C 93.333 63.821,93.293 63.972,93.000 64.048 C 92.707 64.125,92.667 64.276,92.667 65.298 C 92.667 66.321,92.626 66.472,92.333 66.548 C 92.108 66.607,92.000 66.776,92.000 67.068 L 92.000 67.500 102.500 67.500 L 113.000 67.500 113.000 66.428 C 113.000 65.502,113.046 65.341,113.333 65.250 C 113.627 65.157,113.667 64.998,113.667 63.905 C 113.667 62.778,113.697 62.667,114.000 62.667 C 114.293 62.667,114.333 62.556,114.333 61.750 C 114.333 61.056,114.414 60.753,114.667 60.500 C 114.926 60.241,115.000 59.944,115.000 59.167 C 115.000 58.426,115.060 58.167,115.231 58.167 C 115.524 58.167,115.662 57.650,115.664 56.542 C 115.666 55.876,115.726 55.667,115.917 55.667 C 116.113 55.667,116.167 55.435,116.167 54.585 C 116.167 53.683,116.222 53.468,116.500 53.295 C 116.771 53.126,116.833 52.906,116.833 52.127 C 116.833 51.417,116.894 51.167,117.066 51.167 C 117.391 51.167,117.500 50.791,117.500 49.672 C 117.500 48.846,117.548 48.693,117.833 48.618 C 118.126 48.542,118.167 48.391,118.167 47.368 C 118.167 46.346,118.207 46.195,118.500 46.118 C 118.784 46.044,118.833 45.891,118.833 45.092 C 118.833 44.383,118.915 44.065,119.167 43.795 C 119.411 43.532,119.500 43.207,119.500 42.570 C 119.500 41.952,119.572 41.675,119.750 41.606 C 119.939 41.534,120.000 41.229,120.000 40.358 C 120.000 39.346,120.041 39.195,120.333 39.118 C 120.626 39.042,120.667 38.891,120.667 37.868 C 120.667 36.846,120.707 36.695,121.000 36.618 C 121.283 36.544,121.333 36.391,121.333 35.599 C 121.333 34.889,121.413 34.587,121.667 34.333 C 121.914 34.086,122.000 33.778,122.000 33.143 C 122.000 32.531,122.080 32.228,122.282 32.080 C 122.484 31.933,122.585 31.554,122.636 30.757 C 122.683 30.015,122.784 29.611,122.937 29.553 C 123.103 29.489,123.167 29.125,123.167 28.232 C 123.167 27.111,123.197 27.000,123.500 27.000 C 123.796 27.000,123.833 26.889,123.833 26.000 C 123.833 25.256,123.893 25.000,124.066 25.000 C 124.391 25.000,124.500 24.624,124.500 23.506 C 124.500 22.679,124.548 22.526,124.833 22.452 C 125.127 22.375,125.167 22.224,125.167 21.182 L 125.167 20.000 129.333 20.000 L 133.500 20.000 133.500 20.655 C 133.500 21.164,133.426 21.334,133.167 21.417 C 132.876 21.509,132.833 21.669,132.833 22.667 C 132.833 23.664,132.791 23.824,132.500 23.917 C 132.206 24.010,132.167 24.169,132.167 25.261 C 132.167 26.389,132.137 26.500,131.833 26.500 C 131.539 26.500,131.500 26.611,131.500 27.440 C 131.500 28.131,131.425 28.435,131.218 28.586 C 131.016 28.733,130.915 29.111,130.865 29.897 C 130.814 30.691,130.730 31.000,130.564 31.000 C 130.388 31.000,130.333 31.297,130.333 32.250 C 130.333 33.389,130.304 33.500,130.000 33.500 C 129.696 33.500,129.667 33.611,129.667 34.750 C 129.667 35.889,129.637 36.000,129.333 36.000 C 129.037 36.000,129.000 36.111,129.000 37.000 C 129.000 37.740,128.940 38.000,128.769 38.000 C 128.476 38.000,128.338 38.516,128.336 39.625 C 128.334 40.261,128.270 40.500,128.101 40.500 C 127.775 40.500,127.667 40.876,127.667 42.014 C 127.667 42.742,127.606 43.000,127.436 43.000 C 127.149 43.000,127.005 43.513,127.002 44.547 C 127.001 45.100,126.923 45.373,126.750 45.440 C 126.568 45.510,126.500 45.796,126.500 46.498 C 126.500 47.321,126.451 47.474,126.167 47.548 C 125.874 47.625,125.833 47.776,125.833 48.798 C 125.833 49.821,125.793 49.972,125.500 50.048 C 125.207 50.125,125.167 50.276,125.167 51.298 C 125.167 52.321,125.126 52.472,124.833 52.548 C 124.547 52.623,124.500 52.776,124.500 53.625 C 124.500 54.403,124.429 54.680,124.167 54.917 C 123.914 55.145,123.833 55.430,123.833 56.091 C 123.833 56.714,123.762 56.992,123.583 57.060 C 123.399 57.131,123.333 57.422,123.333 58.163 C 123.333 58.964,123.265 59.228,123.000 59.455 C 122.723 59.692,122.667 59.947,122.667 60.954 C 122.667 62.056,122.636 62.167,122.333 62.167 C 122.037 62.167,122.000 62.278,122.000 63.167 C 122.000 63.907,121.940 64.167,121.769 64.167 C 121.483 64.167,121.339 64.679,121.336 65.702 C 121.334 66.316,121.260 66.527,121.000 66.667 C 120.817 66.765,120.667 66.992,120.667 67.173 C 120.667 67.495,120.840 67.500,131.167 67.500 L 141.667 67.500 141.667 66.623 C 141.667 65.927,141.735 65.704,142.000 65.539 C 142.273 65.368,142.333 65.150,142.333 64.332 C 142.333 63.589,142.393 63.333,142.566 63.333 C 142.891 63.333,143.000 62.958,143.000 61.839 C 143.000 61.012,143.048 60.860,143.333 60.785 C 143.626 60.709,143.667 60.558,143.667 59.556 C 143.667 58.594,143.719 58.381,144.000 58.205 C 144.262 58.042,144.333 57.817,144.333 57.153 C 144.333 56.626,144.427 56.216,144.583 56.060 C 144.749 55.894,144.833 55.479,144.833 54.833 C 144.833 54.002,144.883 53.840,145.167 53.750 C 145.457 53.658,145.500 53.498,145.500 52.500 C 145.500 51.502,145.543 51.342,145.833 51.250 C 146.127 51.157,146.167 50.998,146.167 49.905 C 146.167 48.778,146.197 48.667,146.500 48.667 C 146.793 48.667,146.833 48.556,146.833 47.750 C 146.833 47.056,146.914 46.753,147.167 46.500 C 147.426 46.241,147.500 45.944,147.500 45.167 C 147.500 44.426,147.560 44.167,147.731 44.167 C 148.024 44.167,148.162 43.650,148.164 42.542 C 148.166 41.876,148.226 41.667,148.417 41.667 C 148.613 41.667,148.667 41.435,148.667 40.585 C 148.667 39.683,148.722 39.468,149.000 39.295 C 149.269 39.126,149.333 38.906,149.333 38.146 C 149.333 37.346,149.383 37.193,149.667 37.118 C 149.960 37.042,150.000 36.891,150.000 35.868 C 150.000 34.846,150.040 34.695,150.333 34.618 C 150.627 34.542,150.667 34.391,150.667 33.349 C 150.667 32.449,150.722 32.167,150.899 32.167 C 151.205 32.167,151.333 31.798,151.333 30.923 C 151.333 30.490,151.432 30.126,151.583 30.000 C 151.757 29.856,151.833 29.473,151.833 28.749 C 151.833 27.846,151.878 27.694,152.167 27.618 C 152.460 27.542,152.500 27.391,152.500 26.368 C 152.500 25.346,152.540 25.195,152.833 25.118 C 153.127 25.042,153.167 24.891,153.167 23.860 C 153.167 22.836,153.208 22.676,153.500 22.583 C 153.780 22.495,153.833 22.331,153.833 21.567 C 153.833 20.911,153.903 20.629,154.083 20.560 C 154.221 20.508,154.333 20.360,154.333 20.232 C 154.333 20.040,155.013 20.000,158.250 20.000 L 162.167 20.000 162.167 21.000 C 162.167 21.889,162.130 22.000,161.833 22.000 C 161.540 22.000,161.500 22.111,161.500 22.917 C 161.500 23.611,161.419 23.914,161.167 24.167 C 160.909 24.424,160.833 24.722,160.833 25.481 C 160.833 26.321,160.786 26.474,160.500 26.548 C 160.206 26.625,160.167 26.776,160.167 27.818 C 160.167 28.717,160.111 29.000,159.934 29.000 C 159.613 29.000,159.500 29.374,159.500 30.436 C 159.500 31.089,159.430 31.371,159.250 31.440 C 159.068 31.510,159.000 31.796,159.000 32.498 C 159.000 33.321,158.951 33.474,158.667 33.548 C 158.374 33.625,158.333 33.776,158.333 34.798 C 158.333 35.821,158.293 35.972,158.000 36.048 C 157.707 36.125,157.667 36.276,157.667 37.298 C 157.667 38.321,157.626 38.472,157.333 38.548 C 157.050 38.622,157.000 38.776,157.000 39.575 C 157.000 40.284,156.918 40.602,156.667 40.872 C 156.426 41.130,156.333 41.460,156.333 42.055 C 156.333 42.614,156.249 42.942,156.071 43.072 C 155.900 43.197,155.775 43.640,155.713 44.340 C 155.657 44.982,155.527 45.471,155.393 45.550 C 155.235 45.643,155.167 46.056,155.167 46.925 C 155.167 48.056,155.137 48.167,154.833 48.167 C 154.540 48.167,154.500 48.278,154.500 49.083 C 154.500 49.778,154.419 50.081,154.167 50.333 C 153.915 50.585,153.833 50.889,153.833 51.577 C 153.833 52.318,153.771 52.522,153.500 52.667 C 153.216 52.818,153.167 53.016,153.167 53.986 C 153.167 54.988,153.126 55.138,152.833 55.215 C 152.540 55.292,152.500 55.442,152.500 56.484 C 152.500 57.398,152.446 57.667,152.262 57.667 C 152.097 57.667,151.987 57.960,151.905 58.619 C 151.840 59.143,151.684 59.673,151.560 59.797 C 151.416 59.941,151.333 60.415,151.333 61.095 C 151.333 62.056,151.299 62.167,151.000 62.167 C 150.696 62.167,150.667 62.278,150.667 63.417 C 150.667 64.556,150.637 64.667,150.333 64.667 C 150.026 64.667,150.000 64.778,150.000 66.083 L 150.000 67.500 160.167 67.500 L 170.333 67.500 170.333 66.667 C 170.333 65.944,170.378 65.833,170.667 65.833 C 170.970 65.833,171.000 65.722,171.000 64.583 C 171.000 63.444,171.030 63.333,171.333 63.333 C 171.631 63.333,171.667 63.222,171.667 62.287 C 171.667 61.431,171.728 61.196,172.000 61.000 C 172.263 60.811,172.333 60.569,172.333 59.857 C 172.333 59.200,172.410 58.897,172.616 58.747 C 172.817 58.600,172.919 58.222,172.969 57.437 C 173.019 56.642,173.103 56.333,173.269 56.333 C 173.445 56.333,173.500 56.037,173.500 55.083 C 173.500 53.944,173.530 53.833,173.833 53.833 C 174.128 53.833,174.167 53.722,174.167 52.870 C 174.167 52.114,174.238 51.846,174.500 51.622 C 174.765 51.395,174.833 51.130,174.833 50.335 C 174.833 49.590,174.893 49.333,175.066 49.333 C 175.392 49.333,175.500 48.957,175.500 47.820 C 175.500 47.088,175.560 46.833,175.732 46.833 C 176.056 46.833,176.167 46.458,176.167 45.360 C 176.167 44.594,176.230 44.374,176.500 44.205 C 176.766 44.039,176.833 43.817,176.833 43.100 C 176.833 42.456,176.904 42.175,177.083 42.106 C 177.270 42.035,177.333 41.737,177.333 40.933 C 177.333 40.002,177.379 39.841,177.667 39.750 C 177.957 39.658,178.000 39.498,178.000 38.500 C 178.000 37.502,178.043 37.342,178.333 37.250 C 178.621 37.159,178.667 36.998,178.667 36.074 C 178.667 35.183,178.723 34.968,179.000 34.795 C 179.271 34.626,179.333 34.406,179.333 33.627 C 179.333 32.923,179.395 32.667,179.563 32.667 C 179.825 32.667,180.000 31.957,180.000 30.896 C 180.000 30.359,180.066 30.167,180.250 30.167 C 180.450 30.167,180.500 29.917,180.500 28.917 C 180.500 27.778,180.530 27.667,180.833 27.667 C 181.135 27.667,181.167 27.556,181.167 26.511 C 181.167 25.502,181.209 25.342,181.500 25.250 C 181.784 25.160,181.833 24.998,181.833 24.155 C 181.833 23.421,181.893 23.167,182.066 23.167 C 182.392 23.167,182.500 22.790,182.500 21.653 C 182.500 20.921,182.560 20.667,182.732 20.667 C 183.059 20.667,183.167 20.290,183.167 19.153 C 183.167 18.421,183.227 18.167,183.399 18.167 C 183.712 18.167,183.833 17.796,183.833 16.840 C 183.833 16.333,183.925 15.965,184.083 15.833 C 184.253 15.693,184.333 15.316,184.333 14.666 C 184.333 13.846,184.382 13.693,184.667 13.618 C 184.960 13.542,185.000 13.391,185.000 12.368 C 185.000 11.346,185.040 11.195,185.333 11.118 C 185.627 11.042,185.667 10.891,185.667 9.860 C 185.667 8.836,185.708 8.676,186.000 8.583 C 186.279 8.495,186.333 8.331,186.333 7.572 C 186.333 6.889,186.415 6.585,186.667 6.333 C 186.920 6.080,187.000 5.778,187.000 5.078 C 187.000 4.412,187.069 4.130,187.250 4.060 C 187.438 3.988,187.500 3.684,187.500 2.827 C 187.500 1.836,187.543 1.676,187.833 1.583 C 188.101 1.498,188.167 1.331,188.167 0.739 L 188.167 0.000 149.000 0.000 L 109.833 0.000 109.833 1.075 \"\r\n          stroke=\"none\"\r\n          fill={colors.aim}\r\n          fillRule=\"evenodd\"\r\n        ></path>\r\n        <path\r\n          id=\"path1\"\r\n          d=\"M193.333 1.072 C 193.333 1.998,193.288 2.159,193.000 2.250 C 192.706 2.343,192.667 2.502,192.667 3.595 C 192.667 4.722,192.637 4.833,192.333 4.833 C 192.037 4.833,192.000 4.944,192.000 5.833 C 192.000 6.571,191.940 6.833,191.771 6.833 C 191.509 6.833,191.333 7.543,191.333 8.604 C 191.333 9.141,191.267 9.333,191.083 9.333 C 190.883 9.333,190.833 9.583,190.833 10.583 C 190.833 11.722,190.804 11.833,190.500 11.833 C 190.201 11.833,190.167 11.944,190.167 12.915 C 190.167 13.817,190.111 14.032,189.833 14.205 C 189.563 14.374,189.500 14.594,189.500 15.373 C 189.500 16.080,189.439 16.333,189.269 16.333 C 188.976 16.333,188.838 16.850,188.836 17.958 C 188.834 18.594,188.770 18.833,188.601 18.833 C 188.275 18.833,188.167 19.210,188.167 20.347 C 188.167 21.074,188.106 21.333,187.937 21.333 C 187.775 21.333,187.685 21.628,187.635 22.327 C 187.590 22.941,187.455 23.440,187.281 23.632 C 187.088 23.845,187.000 24.234,187.000 24.869 C 187.000 25.654,186.950 25.808,186.667 25.882 C 186.374 25.958,186.333 26.109,186.333 27.132 C 186.333 28.154,186.293 28.305,186.000 28.382 C 185.707 28.458,185.667 28.609,185.667 29.632 C 185.667 30.654,185.626 30.805,185.333 30.882 C 185.049 30.956,185.000 31.109,185.000 31.924 C 185.000 32.621,184.925 32.935,184.724 33.082 C 184.541 33.215,184.422 33.615,184.369 34.267 C 184.322 34.850,184.197 35.304,184.062 35.383 C 183.903 35.476,183.833 35.869,183.833 36.664 C 183.833 37.664,183.791 37.824,183.500 37.917 C 183.206 38.010,183.167 38.169,183.167 39.261 C 183.167 40.389,183.137 40.500,182.833 40.500 C 182.540 40.500,182.500 40.611,182.500 41.417 C 182.500 42.111,182.419 42.414,182.167 42.667 C 181.907 42.926,181.833 43.222,181.833 44.000 C 181.833 44.744,181.774 45.000,181.601 45.000 C 181.275 45.000,181.167 45.376,181.167 46.514 C 181.167 47.239,181.106 47.500,180.938 47.500 C 180.682 47.500,180.500 48.205,180.500 49.193 C 180.500 49.618,180.413 49.877,180.250 49.940 C 180.068 50.010,180.000 50.296,180.000 50.998 C 180.000 51.821,179.951 51.974,179.667 52.048 C 179.374 52.125,179.333 52.276,179.333 53.298 C 179.333 54.321,179.293 54.472,179.000 54.548 C 178.707 54.625,178.667 54.776,178.667 55.798 C 178.667 56.821,178.626 56.972,178.333 57.048 C 178.050 57.122,178.000 57.276,178.000 58.075 C 178.000 58.784,177.918 59.102,177.667 59.372 C 177.422 59.634,177.333 59.960,177.333 60.597 C 177.333 61.214,177.261 61.492,177.083 61.560 C 176.894 61.633,176.833 61.938,176.833 62.809 C 176.833 63.821,176.793 63.972,176.500 64.048 C 176.207 64.125,176.167 64.276,176.167 65.298 C 176.167 66.321,176.126 66.472,175.833 66.548 C 175.608 66.607,175.500 66.776,175.500 67.068 L 175.500 67.500 186.000 67.500 L 196.500 67.500 196.500 66.423 C 196.500 65.516,196.553 65.317,196.833 65.167 C 197.117 65.015,197.167 64.818,197.167 63.847 C 197.167 62.846,197.208 62.695,197.500 62.618 C 197.782 62.545,197.833 62.391,197.833 61.617 C 197.833 60.958,197.903 60.676,198.083 60.606 C 198.273 60.534,198.333 60.227,198.333 59.339 C 198.333 58.278,198.365 58.167,198.667 58.167 C 198.970 58.167,199.000 58.056,199.000 56.917 C 199.000 55.778,199.030 55.667,199.333 55.667 C 199.635 55.667,199.667 55.556,199.667 54.484 C 199.667 53.442,199.706 53.292,200.000 53.215 C 200.281 53.141,200.333 52.988,200.333 52.231 C 200.333 51.556,200.416 51.251,200.667 51.000 C 200.926 50.741,201.000 50.444,201.000 49.667 C 201.000 48.926,201.060 48.667,201.231 48.667 C 201.524 48.667,201.662 48.150,201.664 47.042 C 201.666 46.376,201.726 46.167,201.917 46.167 C 202.112 46.167,202.167 45.940,202.167 45.123 C 202.167 44.261,202.224 44.044,202.500 43.872 C 202.773 43.701,202.833 43.483,202.833 42.665 C 202.833 41.923,202.893 41.667,203.066 41.667 C 203.391 41.667,203.500 41.291,203.500 40.172 C 203.500 39.346,203.548 39.193,203.833 39.118 C 204.127 39.042,204.167 38.891,204.167 37.849 C 204.167 36.949,204.222 36.667,204.399 36.667 C 204.708 36.667,204.833 36.297,204.833 35.391 C 204.833 34.948,204.935 34.541,205.083 34.393 C 205.249 34.228,205.333 33.812,205.333 33.166 C 205.333 32.336,205.383 32.173,205.667 32.083 C 205.957 31.991,206.000 31.831,206.000 30.833 C 206.000 29.836,206.043 29.676,206.333 29.583 C 206.627 29.490,206.667 29.331,206.667 28.239 C 206.667 27.111,206.697 27.000,207.000 27.000 C 207.293 27.000,207.333 26.889,207.333 26.083 C 207.333 25.389,207.414 25.086,207.667 24.833 C 207.926 24.574,208.000 24.278,208.000 23.500 C 208.000 22.760,208.060 22.500,208.231 22.500 C 208.524 22.500,208.662 21.984,208.664 20.875 L 208.667 20.000 217.583 20.000 L 226.500 20.000 226.500 20.627 C 226.500 21.073,226.404 21.313,226.167 21.461 C 225.890 21.634,225.833 21.850,225.833 22.740 C 225.833 23.664,225.788 23.825,225.500 23.917 C 225.206 24.010,225.167 24.169,225.167 25.261 C 225.167 26.389,225.137 26.500,224.833 26.500 C 224.540 26.500,224.500 26.611,224.500 27.415 L 224.500 28.330 217.208 28.373 L 209.917 28.417 209.865 29.042 C 209.834 29.421,209.727 29.667,209.594 29.667 C 209.341 29.667,209.167 30.389,209.167 31.438 C 209.167 31.975,209.101 32.167,208.917 32.167 C 208.717 32.167,208.667 32.415,208.667 33.397 C 208.667 34.488,208.629 34.638,208.333 34.715 C 208.055 34.788,208.000 34.942,208.000 35.651 C 208.000 36.278,207.913 36.587,207.667 36.833 C 207.409 37.091,207.333 37.389,207.333 38.147 C 207.333 38.988,207.286 39.140,207.000 39.215 C 206.706 39.292,206.667 39.442,206.667 40.484 C 206.667 41.384,206.611 41.667,206.434 41.667 C 206.114 41.667,206.000 42.040,206.000 43.085 C 206.000 43.655,205.910 44.066,205.750 44.226 C 205.610 44.367,205.500 44.774,205.500 45.155 C 205.500 45.611,205.391 45.942,205.167 46.167 C 204.902 46.432,204.833 46.722,204.833 47.583 L 204.833 48.667 222.333 48.667 L 239.833 48.667 239.833 47.758 C 239.833 47.077,239.904 46.810,240.116 46.692 C 240.325 46.575,240.417 46.242,240.470 45.420 C 240.517 44.681,240.618 44.278,240.770 44.219 C 240.937 44.155,241.000 43.792,241.000 42.899 C 241.000 41.778,241.030 41.667,241.333 41.667 C 241.626 41.667,241.667 41.556,241.667 40.750 C 241.667 40.056,241.747 39.753,242.000 39.500 C 242.258 39.242,242.333 38.944,242.333 38.186 C 242.333 37.346,242.381 37.193,242.667 37.118 C 242.960 37.042,243.000 36.891,243.000 35.868 C 243.000 34.846,243.040 34.695,243.333 34.618 C 243.626 34.542,243.667 34.391,243.667 33.368 C 243.667 32.346,243.707 32.195,244.000 32.118 C 244.282 32.045,244.333 31.891,244.333 31.119 C 244.333 30.512,244.417 30.138,244.583 30.000 C 244.757 29.856,244.833 29.473,244.833 28.749 C 244.833 27.846,244.878 27.694,245.167 27.618 C 245.460 27.542,245.500 27.391,245.500 26.368 C 245.500 25.346,245.540 25.195,245.833 25.118 C 246.124 25.042,246.167 24.891,246.167 23.938 C 246.167 23.016,246.219 22.817,246.500 22.667 C 246.767 22.524,246.833 22.318,246.833 21.638 C 246.833 21.034,246.914 20.727,247.113 20.582 C 247.306 20.441,247.416 20.051,247.469 19.316 C 247.519 18.623,247.635 18.188,247.802 18.066 C 247.970 17.943,248.085 17.510,248.134 16.814 C 248.180 16.154,248.295 15.699,248.438 15.617 C 248.588 15.529,248.667 15.170,248.667 14.575 C 248.667 13.889,248.748 13.585,249.000 13.333 C 249.252 13.081,249.333 12.778,249.333 12.089 C 249.333 11.349,249.396 11.145,249.667 11.000 C 249.947 10.850,250.000 10.651,250.000 9.750 C 250.000 8.849,250.053 8.650,250.333 8.500 C 250.617 8.348,250.667 8.151,250.667 7.180 C 250.667 6.179,250.708 6.028,251.000 5.952 C 251.282 5.878,251.333 5.724,251.333 4.953 C 251.333 4.345,251.417 3.971,251.583 3.833 C 251.757 3.689,251.833 3.307,251.833 2.582 C 251.833 1.679,251.878 1.527,252.167 1.452 C 252.432 1.382,252.500 1.224,252.500 0.682 L 252.500 0.000 222.917 0.000 L 193.333 0.000 193.333 1.072 M257.667 1.072 C 257.667 1.998,257.621 2.159,257.333 2.250 C 257.039 2.343,257.000 2.502,257.000 3.595 C 257.000 4.722,256.970 4.833,256.667 4.833 C 256.373 4.833,256.333 4.944,256.333 5.773 C 256.333 6.464,256.259 6.768,256.051 6.920 C 255.850 7.067,255.748 7.445,255.698 8.230 C 255.648 9.024,255.563 9.333,255.397 9.333 C 255.221 9.333,255.167 9.630,255.167 10.583 C 255.167 11.722,255.137 11.833,254.833 11.833 C 254.534 11.833,254.500 11.944,254.500 12.915 C 254.500 13.817,254.444 14.032,254.167 14.205 C 253.896 14.374,253.833 14.594,253.833 15.373 C 253.833 16.080,253.772 16.333,253.603 16.333 C 253.310 16.333,253.172 16.850,253.169 17.958 C 253.167 18.624,253.107 18.833,252.917 18.833 C 252.742 18.833,252.667 19.009,252.667 19.417 L 252.667 20.000 282.250 20.000 L 311.833 20.000 311.833 19.167 C 311.833 18.556,311.922 18.244,312.167 18.000 C 312.425 17.742,312.500 17.444,312.500 16.684 C 312.500 15.965,312.567 15.677,312.750 15.606 C 312.931 15.537,313.000 15.254,313.000 14.589 C 313.000 13.889,313.080 13.586,313.333 13.333 C 313.582 13.085,313.667 12.778,313.667 12.123 C 313.667 11.427,313.735 11.204,314.000 11.039 C 314.277 10.865,314.333 10.650,314.333 9.754 C 314.333 8.849,314.386 8.650,314.667 8.500 C 314.950 8.348,315.000 8.151,315.000 7.180 C 315.000 6.179,315.041 6.028,315.333 5.952 C 315.615 5.878,315.667 5.724,315.667 4.953 C 315.667 4.345,315.750 3.971,315.917 3.833 C 316.090 3.689,316.167 3.307,316.167 2.582 C 316.167 1.679,316.211 1.527,316.500 1.452 C 316.765 1.382,316.833 1.224,316.833 0.682 L 316.833 0.000 287.250 0.000 L 257.667 0.000 257.667 1.072 M322.000 1.072 C 322.000 1.998,321.954 2.159,321.667 2.250 C 321.373 2.343,321.333 2.502,321.333 3.595 C 321.333 4.722,321.303 4.833,321.000 4.833 C 320.704 4.833,320.667 4.944,320.667 5.833 C 320.667 6.571,320.606 6.833,320.438 6.833 C 320.175 6.833,320.000 7.543,320.000 8.604 C 320.000 9.141,319.934 9.333,319.750 9.333 C 319.550 9.333,319.500 9.583,319.500 10.583 C 319.500 11.722,319.470 11.833,319.167 11.833 C 318.868 11.833,318.833 11.944,318.833 12.915 C 318.833 13.817,318.778 14.032,318.500 14.205 C 318.229 14.374,318.167 14.594,318.167 15.373 C 318.167 16.083,318.106 16.333,317.934 16.333 C 317.608 16.333,317.500 16.710,317.500 17.847 C 317.500 18.579,317.440 18.833,317.268 18.833 C 316.941 18.833,316.833 19.210,316.833 20.347 C 316.833 21.073,316.773 21.333,316.604 21.333 C 316.359 21.333,316.167 22.031,316.167 22.917 C 316.167 23.215,316.054 23.553,315.917 23.667 C 315.747 23.807,315.667 24.184,315.667 24.834 C 315.667 25.654,315.618 25.807,315.333 25.882 C 315.040 25.958,315.000 26.109,315.000 27.132 C 315.000 28.154,314.960 28.305,314.667 28.382 C 314.374 28.458,314.333 28.609,314.333 29.632 C 314.333 30.654,314.293 30.805,314.000 30.882 C 313.716 30.956,313.667 31.109,313.667 31.924 C 313.667 32.621,313.592 32.935,313.391 33.082 C 313.208 33.215,313.088 33.615,313.036 34.267 C 312.989 34.850,312.864 35.304,312.728 35.383 C 312.570 35.476,312.500 35.869,312.500 36.664 C 312.500 37.664,312.457 37.824,312.167 37.917 C 311.873 38.010,311.833 38.169,311.833 39.261 C 311.833 40.389,311.803 40.500,311.500 40.500 C 311.204 40.500,311.167 40.611,311.167 41.500 C 311.167 42.240,311.107 42.500,310.936 42.500 C 310.643 42.500,310.505 43.016,310.502 44.125 C 310.501 44.761,310.437 45.000,310.268 45.000 C 309.941 45.000,309.833 45.376,309.833 46.514 C 309.833 47.242,309.773 47.500,309.603 47.500 C 309.316 47.500,309.172 48.013,309.169 49.047 C 309.167 49.600,309.090 49.873,308.917 49.940 C 308.734 50.010,308.667 50.296,308.667 50.998 C 308.667 51.821,308.618 51.974,308.333 52.048 C 308.040 52.125,308.000 52.276,308.000 53.298 C 308.000 54.321,307.960 54.472,307.667 54.548 C 307.374 54.625,307.333 54.776,307.333 55.798 C 307.333 56.821,307.293 56.972,307.000 57.048 C 306.716 57.122,306.667 57.276,306.667 58.075 C 306.667 58.784,306.585 59.102,306.333 59.372 C 306.089 59.634,306.000 59.960,306.000 60.597 C 306.000 61.214,305.928 61.492,305.750 61.560 C 305.566 61.631,305.500 61.922,305.500 62.663 C 305.500 63.464,305.432 63.728,305.167 63.955 C 304.895 64.188,304.833 64.447,304.833 65.351 C 304.833 66.321,304.791 66.472,304.500 66.548 C 304.275 66.607,304.167 66.776,304.167 67.068 L 304.167 67.500 343.333 67.500 L 382.500 67.500 382.500 66.667 C 382.500 66.065,382.565 65.833,382.732 65.833 C 383.059 65.833,383.167 65.457,383.167 64.320 C 383.167 63.588,383.227 63.333,383.399 63.333 C 383.708 63.333,383.833 62.964,383.833 62.058 C 383.833 61.615,383.935 61.208,384.083 61.060 C 384.248 60.895,384.333 60.480,384.333 59.841 C 384.333 59.012,384.382 58.860,384.667 58.785 C 384.960 58.708,385.000 58.558,385.000 57.535 C 385.000 56.512,385.040 56.362,385.333 56.285 C 385.626 56.208,385.667 56.058,385.667 55.035 C 385.667 54.012,385.707 53.862,386.000 53.785 C 386.279 53.712,386.333 53.558,386.333 52.834 C 386.333 52.222,386.431 51.846,386.667 51.545 C 386.904 51.244,387.000 50.869,387.000 50.245 C 387.000 49.620,387.072 49.342,387.250 49.273 C 387.439 49.201,387.500 48.895,387.500 48.025 C 387.500 47.012,387.541 46.862,387.833 46.785 C 388.126 46.708,388.167 46.558,388.167 45.535 C 388.167 44.512,388.207 44.362,388.500 44.285 C 388.787 44.210,388.833 44.058,388.833 43.182 C 388.833 42.429,388.893 42.167,389.064 42.167 C 389.347 42.167,389.495 41.656,389.498 40.665 C 389.499 40.096,389.581 39.863,389.833 39.705 C 390.109 39.533,390.167 39.317,390.167 38.452 C 390.167 37.614,390.232 37.351,390.500 37.122 C 390.765 36.895,390.833 36.630,390.833 35.830 C 390.833 35.088,390.899 34.798,391.083 34.727 C 391.266 34.657,391.333 34.370,391.333 33.668 C 391.333 32.846,391.382 32.693,391.667 32.618 C 391.960 32.542,392.000 32.391,392.000 31.349 C 392.000 30.278,392.031 30.167,392.333 30.167 C 392.637 30.167,392.667 30.056,392.667 28.917 C 392.667 27.778,392.696 27.667,393.000 27.667 C 393.301 27.667,393.333 27.556,393.333 26.506 C 393.333 25.516,393.382 25.319,393.667 25.167 C 393.933 25.024,394.000 24.818,394.000 24.138 C 394.000 23.530,394.081 23.228,394.282 23.080 C 394.484 22.933,394.585 22.555,394.635 21.770 C 394.686 20.976,394.770 20.667,394.936 20.667 C 395.112 20.667,395.167 20.373,395.167 19.436 C 395.167 18.346,395.205 18.196,395.500 18.118 C 395.783 18.044,395.833 17.891,395.833 17.099 C 395.833 16.389,395.913 16.087,396.167 15.833 C 396.419 15.581,396.500 15.278,396.500 14.583 C 396.500 13.914,396.562 13.667,396.731 13.667 C 397.024 13.667,397.162 13.150,397.164 12.042 C 397.166 11.409,397.230 11.167,397.397 11.167 C 397.689 11.167,397.828 10.651,397.831 9.559 C 397.833 8.953,397.906 8.674,398.083 8.606 C 398.267 8.536,398.333 8.245,398.333 7.505 C 398.333 6.757,398.393 6.500,398.566 6.500 C 398.886 6.500,399.000 6.126,399.000 5.081 C 399.000 4.336,399.055 4.172,399.333 4.083 C 399.624 3.991,399.667 3.831,399.667 2.822 C 399.667 2.163,399.738 1.667,399.833 1.667 C 399.925 1.667,400.000 1.292,400.000 0.833 L 400.000 0.000 390.000 0.000 C 384.325 0.000,380.000 0.064,380.000 0.147 C 380.000 0.228,379.850 0.334,379.667 0.382 C 379.374 0.458,379.333 0.609,379.333 1.632 C 379.333 2.654,379.293 2.805,379.000 2.882 C 378.716 2.956,378.667 3.109,378.667 3.908 C 378.667 4.617,378.585 4.935,378.333 5.205 C 378.093 5.463,378.000 5.793,378.000 6.388 C 378.000 6.968,377.917 7.274,377.721 7.418 C 377.527 7.559,377.418 7.947,377.366 8.686 C 377.320 9.346,377.205 9.801,377.062 9.883 C 376.900 9.977,376.833 10.381,376.833 11.258 C 376.833 12.389,376.804 12.500,376.500 12.500 C 376.207 12.500,376.167 12.611,376.167 13.417 C 376.167 14.111,376.086 14.414,375.833 14.667 C 375.581 14.919,375.500 15.222,375.500 15.911 C 375.500 16.651,375.438 16.855,375.167 17.000 C 374.883 17.152,374.833 17.349,374.833 18.320 C 374.833 19.321,374.792 19.472,374.500 19.548 C 374.206 19.625,374.167 19.776,374.167 20.818 C 374.167 21.717,374.111 22.000,373.934 22.000 C 373.628 22.000,373.500 22.368,373.500 23.246 C 373.500 23.731,373.419 23.996,373.250 24.060 C 373.061 24.133,373.000 24.440,373.000 25.328 C 373.000 26.389,372.968 26.500,372.667 26.500 C 372.363 26.500,372.333 26.611,372.333 27.750 C 372.333 28.889,372.304 29.000,372.000 29.000 C 371.698 29.000,371.667 29.111,371.667 30.182 C 371.667 31.224,371.627 31.375,371.333 31.452 C 371.051 31.526,371.000 31.679,371.000 32.459 C 371.000 33.132,370.924 33.435,370.718 33.586 C 370.516 33.733,370.415 34.111,370.365 34.897 C 370.317 35.654,370.227 36.000,370.078 36.000 C 369.930 36.000,369.825 36.397,369.745 37.250 C 369.661 38.146,369.562 38.500,369.397 38.500 C 369.227 38.500,369.167 38.760,369.167 39.500 C 369.167 40.278,369.093 40.574,368.833 40.833 C 368.581 41.086,368.500 41.389,368.500 42.083 C 368.500 42.756,368.438 43.000,368.268 43.000 C 367.943 43.000,367.833 43.376,367.833 44.494 C 367.833 45.321,367.785 45.474,367.500 45.548 C 367.217 45.622,367.167 45.776,367.167 46.568 L 367.167 47.500 363.083 47.500 C 358.684 47.500,358.383 47.426,359.250 46.560 C 359.420 46.389,359.500 45.968,359.500 45.238 C 359.500 44.278,359.535 44.167,359.833 44.167 C 360.137 44.167,360.167 44.056,360.167 42.917 C 360.167 41.778,360.196 41.667,360.500 41.667 C 360.803 41.667,360.833 41.556,360.833 40.436 C 360.833 39.346,360.871 39.196,361.167 39.118 C 361.446 39.045,361.500 38.891,361.500 38.159 C 361.500 37.531,361.579 37.229,361.782 37.080 C 361.984 36.933,362.085 36.555,362.135 35.770 C 362.186 34.976,362.270 34.667,362.436 34.667 C 362.612 34.667,362.667 34.370,362.667 33.417 C 362.667 32.278,362.696 32.167,363.000 32.167 C 363.298 32.167,363.333 32.056,363.333 31.123 C 363.333 30.261,363.391 30.044,363.667 29.872 C 363.937 29.703,364.000 29.483,364.000 28.705 C 364.000 27.927,364.063 27.708,364.333 27.539 C 364.611 27.365,364.667 27.150,364.667 26.249 C 364.667 25.435,364.724 25.167,364.899 25.167 C 365.223 25.167,365.333 24.791,365.333 23.693 C 365.333 22.927,365.397 22.707,365.667 22.539 C 365.929 22.375,366.000 22.150,366.000 21.487 C 366.000 20.959,366.094 20.549,366.250 20.393 C 366.415 20.228,366.500 19.812,366.500 19.166 C 366.500 18.336,366.550 18.173,366.833 18.083 C 367.124 17.991,367.167 17.831,367.167 16.833 C 367.167 15.836,367.209 15.676,367.500 15.583 C 367.794 15.490,367.833 15.331,367.833 14.239 C 367.833 13.111,367.863 13.000,368.167 13.000 C 368.461 13.000,368.500 12.889,368.500 12.060 C 368.500 11.369,368.575 11.065,368.782 10.914 C 368.984 10.767,369.085 10.389,369.135 9.603 C 369.186 8.809,369.270 8.500,369.436 8.500 C 369.612 8.500,369.667 8.203,369.667 7.250 C 369.667 6.111,369.696 6.000,370.000 6.000 C 370.299 6.000,370.333 5.889,370.333 4.918 C 370.333 4.017,370.389 3.801,370.667 3.628 C 370.937 3.459,371.000 3.239,371.000 2.460 C 371.000 1.751,371.061 1.500,371.232 1.500 C 371.513 1.500,371.667 1.141,371.667 0.486 L 371.667 0.000 361.500 0.000 C 354.833 0.000,351.333 0.057,351.333 0.167 C 351.333 0.258,351.183 0.333,351.000 0.333 C 350.704 0.333,350.667 0.444,350.667 1.333 C 350.667 2.077,350.607 2.333,350.434 2.333 C 350.109 2.333,350.000 2.709,350.000 3.828 C 350.000 4.654,349.952 4.807,349.667 4.882 C 349.373 4.958,349.333 5.109,349.333 6.151 C 349.333 7.051,349.278 7.333,349.101 7.333 C 348.792 7.333,348.667 7.703,348.667 8.609 C 348.667 9.052,348.565 9.459,348.417 9.607 C 348.252 9.772,348.167 10.187,348.167 10.826 C 348.167 11.654,348.118 11.807,347.833 11.882 C 347.540 11.958,347.500 12.109,347.500 13.132 C 347.500 14.154,347.460 14.305,347.167 14.382 C 346.874 14.458,346.833 14.609,346.833 15.632 C 346.833 16.654,346.793 16.805,346.500 16.882 C 346.217 16.956,346.167 17.109,346.167 17.901 C 346.167 18.611,346.087 18.913,345.833 19.167 C 345.586 19.414,345.500 19.722,345.500 20.357 C 345.500 20.944,345.417 21.274,345.237 21.405 C 345.066 21.530,344.942 21.974,344.880 22.674 C 344.824 23.315,344.694 23.804,344.559 23.883 C 344.401 23.977,344.333 24.390,344.333 25.258 C 344.333 26.389,344.304 26.500,344.000 26.500 C 343.704 26.500,343.667 26.611,343.667 27.500 C 343.667 28.240,343.607 28.500,343.436 28.500 C 343.150 28.500,343.005 29.012,343.002 30.036 C 343.000 30.650,342.927 30.861,342.667 31.000 C 342.383 31.152,342.333 31.349,342.333 32.320 C 342.333 33.321,342.292 33.472,342.000 33.548 C 341.709 33.624,341.667 33.776,341.667 34.740 C 341.667 35.567,341.604 35.868,341.417 35.940 C 341.234 36.010,341.167 36.296,341.167 36.998 C 341.167 37.821,341.118 37.974,340.833 38.048 C 340.540 38.125,340.500 38.276,340.500 39.318 C 340.500 40.389,340.469 40.500,340.167 40.500 C 339.863 40.500,339.833 40.611,339.833 41.750 C 339.833 42.889,339.804 43.000,339.500 43.000 C 339.203 43.000,339.167 43.111,339.167 44.007 C 339.167 44.784,339.090 45.096,338.833 45.372 C 338.587 45.636,338.500 45.960,338.500 46.615 L 338.500 47.500 334.417 47.500 L 330.333 47.500 330.333 46.833 C 330.333 46.352,330.403 46.167,330.583 46.167 C 330.782 46.167,330.833 45.927,330.833 45.011 C 330.833 44.002,330.876 43.842,331.167 43.750 C 331.449 43.661,331.500 43.498,331.500 42.696 C 331.500 41.927,331.563 41.707,331.833 41.539 C 332.110 41.366,332.167 41.150,332.167 40.268 C 332.167 39.346,332.211 39.194,332.500 39.118 C 332.792 39.042,332.833 38.891,332.833 37.889 C 332.833 36.927,332.886 36.714,333.167 36.539 C 333.430 36.374,333.501 36.146,333.505 35.457 C 333.508 34.955,333.615 34.446,333.755 34.260 C 333.898 34.071,334.000 33.573,334.000 33.063 C 334.000 32.336,334.056 32.171,334.333 32.083 C 334.624 31.991,334.667 31.831,334.667 30.833 C 334.667 29.836,334.709 29.676,335.000 29.583 C 335.294 29.490,335.333 29.331,335.333 28.239 C 335.333 27.111,335.363 27.000,335.667 27.000 C 335.960 27.000,336.000 26.889,336.000 26.083 C 336.000 25.389,336.081 25.086,336.333 24.833 C 336.593 24.574,336.667 24.278,336.667 23.500 C 336.667 22.760,336.727 22.500,336.897 22.500 C 337.190 22.500,337.328 21.984,337.331 20.875 C 337.333 20.209,337.393 20.000,337.583 20.000 C 337.783 20.000,337.833 19.750,337.833 18.750 C 337.833 17.611,337.863 17.500,338.167 17.500 C 338.463 17.500,338.500 17.389,338.500 16.500 C 338.500 15.756,338.560 15.500,338.732 15.500 C 339.057 15.500,339.167 15.124,339.167 14.006 C 339.167 13.179,339.215 13.026,339.500 12.952 C 339.793 12.875,339.833 12.724,339.833 11.702 C 339.833 10.679,339.874 10.528,340.167 10.452 C 340.458 10.376,340.500 10.224,340.500 9.260 C 340.500 8.433,340.563 8.132,340.750 8.060 C 340.932 7.990,341.000 7.704,341.000 7.002 C 341.000 6.179,341.049 6.026,341.333 5.952 C 341.626 5.875,341.667 5.724,341.667 4.702 C 341.667 3.679,341.707 3.528,342.000 3.452 C 342.296 3.374,342.333 3.224,342.333 2.117 C 342.333 1.161,342.392 0.847,342.583 0.773 C 342.721 0.720,342.833 0.525,342.833 0.339 C 342.833 0.002,342.776 0.000,332.417 0.000 L 322.000 0.000 322.000 1.072 M251.444 23.944 C 251.383 24.006,251.333 24.447,251.333 24.925 C 251.333 25.654,251.280 25.809,251.000 25.882 C 250.707 25.958,250.667 26.109,250.667 27.132 C 250.667 28.154,250.626 28.305,250.333 28.382 C 250.040 28.458,250.000 28.609,250.000 29.632 C 250.000 30.654,249.960 30.805,249.667 30.882 C 249.382 30.956,249.333 31.109,249.333 31.924 C 249.333 32.621,249.259 32.935,249.057 33.082 C 248.875 33.215,248.755 33.615,248.702 34.267 C 248.655 34.850,248.530 35.304,248.395 35.383 C 248.237 35.476,248.167 35.869,248.167 36.664 C 248.167 37.664,248.124 37.824,247.833 37.917 C 247.539 38.010,247.500 38.169,247.500 39.261 C 247.500 40.389,247.470 40.500,247.167 40.500 C 246.874 40.500,246.833 40.611,246.833 41.417 C 246.833 42.111,246.753 42.414,246.500 42.667 C 246.006 43.161,246.056 43.966,246.594 44.171 C 247.060 44.348,304.301 44.404,304.958 44.228 C 305.304 44.136,305.333 44.032,305.333 42.897 C 305.333 41.778,305.363 41.667,305.667 41.667 C 305.963 41.667,306.000 41.556,306.000 40.667 C 306.000 39.923,306.060 39.667,306.232 39.667 C 306.557 39.667,306.667 39.291,306.667 38.172 C 306.667 37.346,306.715 37.193,307.000 37.118 C 307.293 37.042,307.333 36.891,307.333 35.868 C 307.333 34.846,307.374 34.695,307.667 34.618 C 307.960 34.542,308.000 34.391,308.000 33.368 C 308.000 32.346,308.040 32.195,308.333 32.118 C 308.615 32.045,308.667 31.891,308.667 31.119 C 308.667 30.512,308.750 30.138,308.917 30.000 C 309.090 29.856,309.167 29.473,309.167 28.749 C 309.167 27.846,309.211 27.694,309.500 27.618 C 309.793 27.542,309.833 27.391,309.833 26.360 C 309.833 25.336,309.875 25.176,310.167 25.083 C 310.602 24.945,310.610 24.237,310.178 24.006 C 309.816 23.813,251.637 23.752,251.444 23.944 M245.076 47.678 C 245.016 47.776,244.925 48.307,244.875 48.859 C 244.819 49.479,244.698 49.896,244.559 49.949 C 244.405 50.008,244.333 50.343,244.333 50.998 C 244.333 51.821,244.285 51.974,244.000 52.048 C 243.706 52.125,243.667 52.276,243.667 53.318 C 243.667 54.389,243.635 54.500,243.333 54.500 C 243.030 54.500,243.000 54.611,243.000 55.731 C 243.000 56.821,242.962 56.971,242.667 57.048 C 242.383 57.122,242.333 57.276,242.333 58.075 C 242.333 58.784,242.252 59.102,242.000 59.372 C 241.755 59.634,241.667 59.960,241.667 60.597 C 241.667 61.214,241.595 61.492,241.417 61.560 C 241.228 61.633,241.167 61.938,241.167 62.809 C 241.167 63.821,241.126 63.972,240.833 64.048 C 240.540 64.125,240.500 64.276,240.500 65.298 C 240.500 66.321,240.460 66.472,240.167 66.548 C 239.941 66.607,239.833 66.776,239.833 67.068 L 239.833 67.500 269.417 67.500 L 299.000 67.500 299.000 66.667 C 299.000 66.065,299.065 65.833,299.232 65.833 C 299.557 65.833,299.667 65.458,299.667 64.339 C 299.667 63.512,299.715 63.360,300.000 63.285 C 300.293 63.208,300.333 63.058,300.333 62.035 C 300.333 61.012,300.374 60.862,300.667 60.785 C 300.956 60.709,301.000 60.558,301.000 59.636 C 301.000 58.780,301.065 58.519,301.333 58.289 C 301.583 58.075,301.667 57.797,301.667 57.186 C 301.667 56.614,301.741 56.340,301.917 56.273 C 302.106 56.201,302.167 55.895,302.167 55.025 C 302.167 54.012,302.207 53.862,302.500 53.785 C 302.793 53.708,302.833 53.558,302.833 52.527 C 302.833 51.502,302.875 51.343,303.167 51.250 C 303.450 51.160,303.500 50.998,303.500 50.176 C 303.500 49.518,303.580 49.141,303.750 49.000 C 304.076 48.730,304.070 48.093,303.738 47.762 C 303.412 47.435,245.278 47.352,245.076 47.678 \"\r\n          stroke=\"none\"\r\n          fill={colors.pew}\r\n          fillRule=\"evenodd\"\r\n        ></path>\r\n      </g>\r\n    </svg>\r\n  );\r\n}\r\n","import \"./styles.scss\";\r\n\r\nimport React, { useCallback, useEffect } from \"react\";\r\n\r\nimport Logo from \"../Logo\";\r\n\r\nexport const DEFAULT_GAME_OPTIONS = {\r\n  onHitSoundEffect: true,\r\n  onFireSoundEffect: true,\r\n  visualEffects: true,\r\n  targetGoal: 0, // no limit\r\n  simultaneousTargetCount: 3,\r\n  targetInterval: 1000,\r\n  targetSize: 30,\r\n  targetSizeVariation: 10,\r\n};\r\n\r\nexport default function GameOptions({\r\n  gameOptions,\r\n  setGameOptions,\r\n  updateGameOptionsVisibility,\r\n  showOptions,\r\n  overlay = true,\r\n}) {\r\n  const updateOption = useCallback(\r\n    (optionName, newValue) => {\r\n      setGameOptions({ ...gameOptions, [optionName]: newValue });\r\n    },\r\n    [gameOptions, setGameOptions]\r\n  );\r\n\r\n  // Ensure that the user doesn't leave empty fields, by falling back to the defaults\r\n  useEffect(() => {\r\n    if (\r\n      showOptions ||\r\n      Object.values(gameOptions).filter((val) => {\r\n        return typeof val !== \"boolean\" && isNaN(parseInt(val));\r\n      }).length === 0\r\n    )\r\n      return;\r\n\r\n    setGameOptions((cur) => ({\r\n      ...cur,\r\n      targetGoal: cur.targetGoal || 0, // can be empty\r\n      simultaneousTargetCount:\r\n        cur.simultaneousTargetCount ||\r\n        DEFAULT_GAME_OPTIONS.simultaneousTargetCount,\r\n      targetInterval: cur.targetInterval || DEFAULT_GAME_OPTIONS.targetInterval,\r\n      targetSize: cur.targetSize || DEFAULT_GAME_OPTIONS.targetSize,\r\n      targetSizeVariation: cur.targetSizeVariation || 0, // can be empty\r\n    }));\r\n  }, [showOptions, setGameOptions, gameOptions]);\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={`${overlay ? \"overlay\" : \"\"} game-options ${\r\n          showOptions ? \"visible\" : \"\"\r\n        }`}\r\n      >\r\n        <Logo className=\"default-logo\" />\r\n        <div className=\"option-group\">\r\n          <Option\r\n            value={gameOptions.onFireSoundEffect || \"\"}\r\n            updateValue={updateOption}\r\n            optionTag=\"onFireSoundEffect\"\r\n            label={\r\n              <>\r\n                Enable sound effect <i>on fire</i>\r\n              </>\r\n            }\r\n            type=\"checkbox\"\r\n          />\r\n          <Option\r\n            value={gameOptions.onHitSoundEffect || \"\"}\r\n            updateValue={updateOption}\r\n            optionTag=\"onHitSoundEffect\"\r\n            label={\r\n              <>\r\n                Enable sound effect <i>on hit</i>\r\n              </>\r\n            }\r\n            type=\"checkbox\"\r\n          />\r\n          <Option\r\n            value={gameOptions.visualEffects || \"\"}\r\n            updateValue={updateOption}\r\n            optionTag=\"visualEffects\"\r\n            label=\"Enable special visual effects\"\r\n            type=\"checkbox\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"option-group\">\r\n          <Option\r\n            value={gameOptions.targetGoal || \"\"}\r\n            updateValue={updateOption}\r\n            optionTag=\"targetGoal\"\r\n            label=\"Total target goal\"\r\n            helpText=\"Leave it empty for no goal\"\r\n            type=\"input\"\r\n            min={0}\r\n            max={5000}\r\n          />\r\n          <Option\r\n            value={gameOptions.simultaneousTargetCount || \"\"}\r\n            updateValue={updateOption}\r\n            optionTag=\"simultaneousTargetCount\"\r\n            label=\"Max. number of simultaneous targets\"\r\n            type=\"input\"\r\n            min={0}\r\n            max={40}\r\n          />\r\n          <Option\r\n            value={gameOptions.targetInterval || \"\"}\r\n            updateValue={updateOption}\r\n            optionTag=\"targetInterval\"\r\n            label=\"Interval between new targets (ms)\"\r\n            type=\"input\"\r\n            min={0}\r\n            max={10000}\r\n            helpText={`Each target will last ${\r\n              gameOptions.targetInterval * gameOptions.simultaneousTargetCount\r\n            } ms`}\r\n          />\r\n          <Option\r\n            value={gameOptions.targetSize || \"\"}\r\n            updateValue={updateOption}\r\n            optionTag=\"targetSize\"\r\n            label=\"Target size\"\r\n            type=\"input\"\r\n            min={0}\r\n            max={100}\r\n          />\r\n          <Option\r\n            value={gameOptions.targetSizeVariation || \"\"}\r\n            updateValue={updateOption}\r\n            optionTag=\"targetSizeVariation\"\r\n            label=\"Target size variation\"\r\n            helpText=\"Leave it empty for no variation\"\r\n            type=\"input\"\r\n            min={0}\r\n            max={100}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"game-options-credits\">\r\n          A project developed by{\" \"}\r\n          <a\r\n            href=\"https://github.com/fmorenodesigns\"\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >\r\n            @fmorenodesigns\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport function Option({\r\n  value,\r\n  updateValue,\r\n  label,\r\n  optionTag,\r\n  type,\r\n  min = undefined,\r\n  max = undefined,\r\n  helpText = \"\",\r\n}) {\r\n  return (\r\n    <div className=\"option\">\r\n      <label htmlFor={`#gameoption-${optionTag}`}>\r\n        {label}\r\n        {helpText && <div className=\"help-text\">{helpText}</div>}\r\n      </label>\r\n      {type === \"input\" ? (\r\n        <input\r\n          type=\"number\"\r\n          className=\"input\"\r\n          id={`gameoption-${optionTag}`}\r\n          value={value}\r\n          onChange={(e) =>\r\n            updateValue(\r\n              optionTag,\r\n              Math.max(Math.min(parseInt(e.target.value), max), min)\r\n            )\r\n          }\r\n        />\r\n      ) : (\r\n        <input\r\n          type=\"checkbox\"\r\n          className=\"checkbox\"\r\n          id={`gameoption-${optionTag}`}\r\n          checked={value}\r\n          onChange={(e) => updateValue(optionTag, e.target.checked)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import \"./styles.scss\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nexport default function Countdown({ startValue, setStarted }) {\r\n  const [count, setCount] = useState(startValue / 1000);\r\n\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => {\r\n      if (count - 1 === 0) {\r\n        setStarted(true);\r\n        return;\r\n      }\r\n\r\n      setCount((cur) => cur - 1);\r\n    }, [1000]);\r\n\r\n    return () => clearTimeout(timeout);\r\n  }, [count, setStarted]);\r\n\r\n  return (\r\n    <div className=\"overlay\">\r\n      <div className=\"countdown-text\">{count}</div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./styles.scss\";\r\n\r\nimport React from \"react\";\r\n\r\nexport function RestartButton({ onClick }) {\r\n  return (\r\n    <button className=\"key-button restart-button\" onClick={onClick}>\r\n      Restart\r\n      <div className=\"key\">SPACE</div>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport function GameOptionsButton({ description, onClick }) {\r\n  return (\r\n    <button className=\"key-button game-options-button\" onClick={onClick}>\r\n      <div className=\"key\">ESC</div>\r\n      {description}\r\n    </button>\r\n  );\r\n}\r\n","import \"./styles.scss\";\r\n\r\nimport React from \"react\";\r\nimport { RestartButton } from \"../KeyButton\";\r\n\r\nexport default function GameOver({ pointsBoard, gameOptions, restartGame }) {\r\n  return (\r\n    <div className=\"game-over\">\r\n      <RestartButton onClick={restartGame} />\r\n      {gameOptions}\r\n      {pointsBoard}\r\n    </div>\r\n  );\r\n}\r\n","import \"./styles.scss\";\r\n\r\nimport React from \"react\";\r\n\r\nexport default function Cube({\r\n  width,\r\n  depth,\r\n  height,\r\n  colors,\r\n  borderColor = null,\r\n}) {\r\n  const boxShadow = borderColor ? `inset 0 0 0 1px ${borderColor}` : undefined;\r\n\r\n  return (\r\n    <div className=\"cube-container\">\r\n      <div\r\n        className=\"cube\"\r\n        style={{\r\n          width,\r\n          height,\r\n          transformOrigin: `center center -${depth / 2}px`,\r\n        }}\r\n      >\r\n        <div\r\n          className=\"face front\"\r\n          style={{\r\n            width,\r\n            height,\r\n            backgroundColor: typeof colors === \"string\" ? colors : colors.front,\r\n            boxShadow,\r\n          }}\r\n        />\r\n        <div\r\n          className=\"face back\"\r\n          style={{\r\n            width,\r\n            height,\r\n            backgroundColor: typeof colors === \"string\" ? colors : colors.back,\r\n            transform: `translateZ(-${depth}px)`,\r\n            boxShadow,\r\n          }}\r\n        />\r\n        <div\r\n          className=\"face left\"\r\n          style={{\r\n            width: depth,\r\n            height,\r\n            backgroundColor: typeof colors === \"string\" ? colors : colors.left,\r\n            boxShadow,\r\n          }}\r\n        />\r\n        <div\r\n          className=\"face right\"\r\n          style={{\r\n            width: depth,\r\n            height,\r\n            backgroundColor: typeof colors === \"string\" ? colors : colors.right,\r\n            boxShadow,\r\n          }}\r\n        />\r\n        <div\r\n          className=\"face top\"\r\n          style={{\r\n            width,\r\n            height: depth,\r\n            backgroundColor: typeof colors === \"string\" ? colors : colors.top,\r\n            boxShadow,\r\n          }}\r\n        />\r\n        <div\r\n          className=\"face bottom\"\r\n          style={{\r\n            width,\r\n            height: depth,\r\n            backgroundColor:\r\n              typeof colors === \"string\" ? colors : colors.bottom,\r\n            boxShadow,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./styles.scss\";\r\n\r\nimport Cube from \"./Cube\";\r\nimport React from \"react\";\r\n\r\nexport default function Gun({ rotation, coiling, hasFlash }) {\r\n  const main = {\r\n    width: 32,\r\n    depth: 140,\r\n    height: 40,\r\n    colors: {\r\n      top: \"#eaf3fd\",\r\n      right: \"#bfd1e6\",\r\n      bottom: \"#808d9c\",\r\n      left: \"#bfd1e6\",\r\n      front: \"#99a9bd\",\r\n      back: \"#99a9bd\",\r\n    },\r\n  };\r\n\r\n  const handle = {\r\n    width: 27,\r\n    depth: 40,\r\n    height: 60,\r\n  };\r\n\r\n  const detail = {\r\n    width: 3,\r\n    depth: main.depth - 40,\r\n    height: 15,\r\n    color: \"#4677f5\",\r\n  };\r\n\r\n  const rotateX = rotation.vertical - (coiling ? 5 : 0);\r\n  const rotateY = rotation.horizontal - (coiling ? 5 : 0);\r\n\r\n  return (\r\n    <div\r\n      className=\"gun\"\r\n      style={{\r\n        top: -main.height - handle.height / 2,\r\n        left: -main.width,\r\n        width: main.width,\r\n        height: main.height,\r\n        transform: `rotateX(${rotateX}deg) rotateY(${rotateY}deg)`,\r\n        transition: coiling ? \"transform 0.05s linear\" : undefined,\r\n      }}\r\n    >\r\n      {hasFlash && (\r\n        <div className=\"blast\" style={{ opacity: coiling ? \"1\" : \"0\" }} />\r\n      )}\r\n      <div className=\"part detail left\">\r\n        <Cube\r\n          width={detail.width}\r\n          depth={detail.depth}\r\n          height={detail.height}\r\n          colors={detail.color}\r\n        />\r\n      </div>\r\n      <div className=\"part detail right\">\r\n        <Cube\r\n          width={detail.width}\r\n          depth={detail.depth}\r\n          height={detail.height}\r\n          colors={detail.color}\r\n        />\r\n      </div>\r\n      <div className=\"part detail bottom\">\r\n        <Cube\r\n          width={main.width + detail.width * 2}\r\n          depth={detail.depth}\r\n          height={detail.width + 2}\r\n          colors=\"#3056b1\"\r\n        />\r\n      </div>\r\n\r\n      <div className=\"part aim\">\r\n        <Cube width={2} depth={30} height={8} colors=\"#abb9d6\" />\r\n      </div>\r\n\r\n      <div className=\"part main\">\r\n        <Cube\r\n          width={main.width}\r\n          depth={main.depth}\r\n          height={main.height}\r\n          colors={main.colors}\r\n        />\r\n      </div>\r\n      <div className=\"part main-detail-horizontal\">\r\n        <Cube width={15} depth={140} height={4} colors={main.colors} />\r\n      </div>\r\n      <div className=\"part main-detail-vertical\">\r\n        <Cube width={15} depth={7} height={main.height} colors={main.colors} />\r\n      </div>\r\n\r\n      <div className=\"part trigger\">\r\n        <Cube\r\n          width={10}\r\n          depth={coiling ? 25 : 40}\r\n          height={22}\r\n          colors=\"#272f35\"\r\n        />\r\n      </div>\r\n\r\n      <div className=\"part handle\">\r\n        <Cube\r\n          width={handle.width}\r\n          depth={handle.depth}\r\n          height={handle.height}\r\n          colors={{\r\n            top: \"#2f343c\",\r\n            bottom: \"#272f35\",\r\n            left: \"#2f343c\",\r\n            right: \"#2f343c\",\r\n            front: \"#272f35\",\r\n            back: \"#272f35\",\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export function isMobile() {\r\n  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\r\n    navigator.userAgent\r\n  );\r\n}\r\n\r\nexport function prettyPercentage(decimalNumber, decimalPlaces) {\r\n  return (decimalNumber * 100).toFixed(decimalPlaces);\r\n}\r\n","import \"./styles.scss\";\r\n\r\nimport React from \"react\";\r\nimport { prettyPercentage } from \"../../utils\";\r\n\r\nexport default function PointsBoard({ points, maxPoints, firedTimes }) {\r\n  const hitAccuracy = points / firedTimes || 0;\r\n  const targetsHitPct = points / maxPoints || 0;\r\n\r\n  return (\r\n    <div className=\"points-board\">\r\n      <CounterGroup\r\n        count={points}\r\n        helpCount={`${prettyPercentage(targetsHitPct, 1)}%`}\r\n        name=\"Targets hit\"\r\n        counterClassName={targetsHitPct >= 0.5 ? \"good\" : \"bad\"}\r\n      />\r\n      <CounterGroup count={maxPoints} name=\"Total targets\" />\r\n      <CounterGroup\r\n        count={`${prettyPercentage(hitAccuracy, 1)}%`}\r\n        name=\"Hit accuracy\"\r\n        counterClassName={hitAccuracy >= 0.5 ? \"good\" : \"bad\"}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction CounterGroup({ count, helpCount, name, counterClassName = \"\" }) {\r\n  return (\r\n    <div className=\"counter-group\">\r\n      <div className={`counter ${counterClassName}`}>\r\n        {count}{\" \"}\r\n        {helpCount && <span className=\"help-counter\">({helpCount})</span>}\r\n      </div>\r\n      <div className=\"counter-name\">{name}</div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./styles.scss\";\r\n\r\nimport React, { useState } from \"react\";\r\n\r\nexport default function Target({ size, left, top, onHit }) {\r\n  const [hit, setHit] = useState(false);\r\n\r\n  return (\r\n    <div\r\n      className={`target ${hit ? \"hit\" : \"\"}`}\r\n      style={{\r\n        left,\r\n        top,\r\n        transform: `scale(${(size / 40) * (hit ? 1.3 : 1)})`,\r\n      }}\r\n      onClick={() => {\r\n        setHit(true);\r\n        onHit();\r\n      }}\r\n    >\r\n      <div className=\"white\">\r\n        <div className=\"red\">\r\n          <div className=\"white\">\r\n            <div className=\"red\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./styles.scss\";\r\n\r\nimport GameOptions, { DEFAULT_GAME_OPTIONS } from \"./components/GameOptions\";\r\nimport React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\n\r\nimport Countdown from \"./components/Countdown\";\r\nimport { GameOptionsButton } from \"./components/KeyButton\";\r\nimport GameOver from \"./components/GameOver\";\r\nimport Gun from \"./components/Gun\";\r\nimport Logo from \"./components/Logo\";\r\nimport PointsBoard from \"./components/PointsBoard\";\r\nimport { RestartButton } from \"./components/KeyButton\";\r\nimport Target from \"./components/Target\";\r\nimport { isMobile } from \"./utils\";\r\nimport { useLocalStorage } from \"./hooks\";\r\n\r\nconst START_COUNTDOWN = 3000;\r\nconst STARTING_GUN_ROTATION = { horizontal: 10, vertical: -5 };\r\n\r\nexport default function Game() {\r\n  return isMobile() ? (\r\n    <div className=\"game\">\r\n      <div className=\"error\">\r\n        This application has been developed to help people practice their mouse\r\n        aim, and is currently not compatible with mobile devices.\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <div className=\"game\">\r\n      <PlayableGame />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction PlayableGame() {\r\n  const onFireSoundEffect = useMemo(() => new Audio(\"./laserbeam.mp3\"), []);\r\n  const onHitSoundEffect = useMemo(() => new Audio(\"./hit.mp3\"), []);\r\n  const playableArea = useRef();\r\n  const playableAreaWidth = playableArea.current?.getBoundingClientRect().width;\r\n  const playableAreaHeight =\r\n    playableArea.current?.getBoundingClientRect().height;\r\n\r\n  const [started, setStarted] = useState(false);\r\n  const [ended, setEnded] = useState(false);\r\n  const [targets, setTargets] = useState([]);\r\n\r\n  const [points, setPoints] = useState(0);\r\n  const [firedTimes, setFiredTimes] = useState(0);\r\n  const [maxPoints, setMaxPoints] = useState(0);\r\n\r\n  const [coiling, setCoiling] = useState(false);\r\n  const [rotation, setRotation] = useState(STARTING_GUN_ROTATION);\r\n\r\n  const [showOptions, setShowOptions] = useState(false);\r\n  const [gameOptions, setGameOptions] = useLocalStorage(\r\n    \"game-options\",\r\n    DEFAULT_GAME_OPTIONS\r\n  );\r\n  const reachedTargetCountLimit = useMemo(\r\n    () => gameOptions.targetGoal && maxPoints >= gameOptions.targetGoal,\r\n    [gameOptions.targetGoal, maxPoints]\r\n  );\r\n\r\n  // Rotate gun\r\n  const handleMovement = useCallback(\r\n    (e) => {\r\n      const x = e.clientX - playableAreaWidth / 2;\r\n      const y = -(e.clientY - playableAreaHeight / 2);\r\n\r\n      setRotation({\r\n        horizontal: -45 * (x / (playableAreaWidth / 2)),\r\n        vertical: -45 * (y / (playableAreaHeight / 2)),\r\n      });\r\n    },\r\n    [playableAreaWidth, playableAreaHeight]\r\n  );\r\n\r\n  const onTargetHit = useCallback(\r\n    (targetIndex) => {\r\n      if (gameOptions.onHitSoundEffect) {\r\n        onHitSoundEffect.currentTime = 0;\r\n        onHitSoundEffect.play();\r\n      }\r\n      setPoints((cur) => cur + 1);\r\n      setTimeout(() => {\r\n        setTargets((cur) => cur.filter(({ index }) => index !== targetIndex));\r\n      }, [200]);\r\n    },\r\n    [gameOptions.onHitSoundEffect, onHitSoundEffect]\r\n  );\r\n\r\n  const fireGun = useCallback(\r\n    (e) => {\r\n      if (gameOptions.onFireSoundEffect) {\r\n        onFireSoundEffect.currentTime = 0;\r\n        onFireSoundEffect.play();\r\n      }\r\n      setCoiling(true);\r\n      setTimeout(() => setCoiling(false), 100);\r\n      setFiredTimes((cur) => cur + 1);\r\n    },\r\n    [onFireSoundEffect, gameOptions.onFireSoundEffect]\r\n  );\r\n\r\n  // Generate new targets\r\n  useEffect(() => {\r\n    if (!started || ended) return;\r\n\r\n    if (!playableAreaHeight || !playableAreaWidth || showOptions) return;\r\n\r\n    const timeout = setTimeout(() => {\r\n      if (showOptions || ended) {\r\n        clearTimeout(timeout);\r\n        return;\r\n      }\r\n\r\n      setTargets((cur) => {\r\n        const sizeVariation =\r\n          Math.round((Math.random() * gameOptions.targetSizeVariation) / 2) * 2;\r\n        const size = gameOptions.targetSize + sizeVariation;\r\n\r\n        if (reachedTargetCountLimit) {\r\n          return cur;\r\n        }\r\n\r\n        const removeOneTarget = cur.filter(\r\n          ({ index }) => index > maxPoints - gameOptions.simultaneousTargetCount\r\n        );\r\n\r\n        return [\r\n          ...removeOneTarget,\r\n          {\r\n            size,\r\n            index: maxPoints,\r\n            left: Math.max(Math.random() * playableAreaWidth - size, size / 2),\r\n            top: Math.max(Math.random() * playableAreaHeight - size, size / 2),\r\n          },\r\n        ];\r\n      });\r\n\r\n      if (!reachedTargetCountLimit) {\r\n        setMaxPoints((curIdx) => curIdx + 1);\r\n      }\r\n    }, gameOptions.targetInterval);\r\n\r\n    return () => clearTimeout(timeout);\r\n  }, [\r\n    ended,\r\n    gameOptions,\r\n    maxPoints,\r\n    playableAreaHeight,\r\n    playableAreaWidth,\r\n    reachedTargetCountLimit,\r\n    showOptions,\r\n    started,\r\n  ]);\r\n\r\n  // Start removing targets after the targetGoal has been reached\r\n  useEffect(() => {\r\n    if (!started || ended) return;\r\n\r\n    if (!reachedTargetCountLimit) return;\r\n\r\n    const timeout = setTimeout(() => {\r\n      console.log(targets);\r\n\r\n      setTargets((cur) => {\r\n        const temp = [...cur].slice(1);\r\n        return temp;\r\n      });\r\n    }, [gameOptions.targetInterval]);\r\n\r\n    return () => clearTimeout(timeout);\r\n  }, [\r\n    ended,\r\n    gameOptions.targetInterval,\r\n    reachedTargetCountLimit,\r\n    started,\r\n    targets,\r\n  ]);\r\n\r\n  const updateGameOptionsVisibility = useCallback(() => {\r\n    setShowOptions((cur) => !cur);\r\n  }, []);\r\n\r\n  const restartGame = useCallback(() => {\r\n    setRotation(STARTING_GUN_ROTATION);\r\n    setShowOptions(false);\r\n    setEnded(false);\r\n    setStarted(false);\r\n    setTargets([]);\r\n    setPoints(0);\r\n    setFiredTimes(0);\r\n    setMaxPoints(0);\r\n  }, []);\r\n\r\n  const handleKeyPress = useCallback(\r\n    (e) => {\r\n      if (e.key === \" \") {\r\n        restartGame();\r\n      } else if (e.key === \"Escape\" && !ended) {\r\n        updateGameOptionsVisibility();\r\n      }\r\n    },\r\n    [restartGame, updateGameOptionsVisibility, ended]\r\n  );\r\n\r\n  // Detect keystrokes\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", handleKeyPress, false);\r\n    return () => document.removeEventListener(\"keydown\", handleKeyPress, false);\r\n  }, [handleKeyPress]);\r\n\r\n  // End the game upon reaching the target goal\r\n  useEffect(() => {\r\n    if (reachedTargetCountLimit && targets.length === 0) {\r\n      setEnded(true);\r\n      setStarted(false);\r\n      return;\r\n    }\r\n  }, [reachedTargetCountLimit, targets.length]);\r\n\r\n  return ended ? (\r\n    <GameOver\r\n      pointsBoard={\r\n        <PointsBoard\r\n          points={points}\r\n          firedTimes={firedTimes}\r\n          maxPoints={maxPoints}\r\n        />\r\n      }\r\n      gameOptions={\r\n        <GameOptions\r\n          gameOptions={gameOptions}\r\n          setGameOptions={setGameOptions}\r\n          updateGameOptionsVisibility={updateGameOptionsVisibility}\r\n          showOptions={true}\r\n          overlay={false}\r\n        />\r\n      }\r\n      restartGame={restartGame}\r\n    />\r\n  ) : (\r\n    <>\r\n      {!started && !showOptions && (\r\n        <Countdown startValue={START_COUNTDOWN} setStarted={setStarted} />\r\n      )}\r\n      <GameOptions\r\n        gameOptions={gameOptions}\r\n        setGameOptions={setGameOptions}\r\n        updateGameOptionsVisibility={updateGameOptionsVisibility}\r\n        showOptions={showOptions}\r\n      />\r\n      <GameOptionsButton\r\n        description={!showOptions ? \"Options\" : \"Save\"}\r\n        onClick={updateGameOptionsVisibility}\r\n      />\r\n      <PointsBoard\r\n        points={points}\r\n        firedTimes={firedTimes}\r\n        maxPoints={maxPoints}\r\n      />\r\n      <RestartButton onClick={restartGame} />\r\n\r\n      {coiling && gameOptions.visualEffects && <div className=\"flashlight\" />}\r\n      <div\r\n        ref={playableArea}\r\n        className={`playable-area ${showOptions ? \"blur\" : \"\"}`}\r\n        onMouseMoveCapture={handleMovement}\r\n        onClick={fireGun}\r\n      >\r\n        <Gun\r\n          rotation={rotation}\r\n          coiling={coiling}\r\n          hasFlash={gameOptions.visualEffects}\r\n        />\r\n        <div className=\"target-container\">\r\n          {targets.map((target) => (\r\n            <Target\r\n              key={target.index}\r\n              size={target.size}\r\n              left={target.left}\r\n              top={target.top}\r\n              onHit={() => {\r\n                onTargetHit(target.index);\r\n              }}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <Logo className=\"mini-logo\" colors={{ aim: \"#fcfcfc\", pew: \"#fcfcfc\" }} />\r\n    </>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\n\r\n// Hook\r\nexport function useLocalStorage(key, initialValue) {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      // Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = (value) => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n}\r\n","import \"./index.scss\";\r\n\r\nimport Game from \"./Game\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}